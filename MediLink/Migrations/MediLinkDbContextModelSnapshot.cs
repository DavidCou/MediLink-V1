// <auto-generated />
using System;
using MediLink.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediLink.Migrations
{
    [DbContext(typeof(MediLinkDbContext))]
    partial class MediLinkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediLink.Entities.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MediLink.Entities.OfficeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfficeTypes");
                });

            modelBuilder.Entity("MediLink.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("PatietDetails_ID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientDetailsId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MediLink.Entities.PatientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientAddresses");
                });

            modelBuilder.Entity("MediLink.Entities.PatientDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientAddressId")
                        .HasColumnType("int");

                    b.Property<int>("PatientAddress_ID")
                        .HasColumnType("int");

                    b.Property<int>("PatientPreferencesId")
                        .HasColumnType("int");

                    b.Property<int>("PatientPreferences_ID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientAddressId");

                    b.HasIndex("PatientPreferencesId");

                    b.ToTable("PatientDetails");
                });

            modelBuilder.Entity("MediLink.Entities.PatientPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAcceptingNePatients")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeType_ID")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeTypeId");

                    b.ToTable("PatientPreferences");
                });

            modelBuilder.Entity("MediLink.Entities.PatientSpokenLanguages", b =>
                {
                    b.Property<int>("Laguage_ID")
                        .HasColumnType("int");

                    b.Property<int>("PatientDetails_ID")
                        .HasColumnType("int");

                    b.HasKey("Laguage_ID", "PatientDetails_ID");

                    b.HasIndex("PatientDetails_ID");

                    b.ToTable("PatientSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.PractionerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PractionerAddresses");
                });

            modelBuilder.Entity("MediLink.Entities.PractionerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAcceptingNewPatients")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeType_ID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PractionerAddressId")
                        .HasColumnType("int");

                    b.Property<int>("PractionerAddress_ID")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastPatientAcceptedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfficeTypeId");

                    b.HasIndex("PractionerAddressId");

                    b.ToTable("PractionerDetails");
                });

            modelBuilder.Entity("MediLink.Entities.Practitioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PractionerDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("PractionerDetails_ID")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PractitionerType_ID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PractionerDetailsId");

                    b.HasIndex("PractitionerTypeId");

                    b.ToTable("Practitioners");
                });

            modelBuilder.Entity("MediLink.Entities.PractitionerSpokenLanguages", b =>
                {
                    b.Property<int>("Laguage_ID")
                        .HasColumnType("int");

                    b.Property<int>("PractionerDetails_ID")
                        .HasColumnType("int");

                    b.HasKey("Laguage_ID", "PractionerDetails_ID");

                    b.HasIndex("PractionerDetails_ID");

                    b.ToTable("PractitionerSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.PractitionerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PractitionerTypes");
                });

            modelBuilder.Entity("MediLink.Entities.PreferedSpokenLanguages", b =>
                {
                    b.Property<int>("Language_ID")
                        .HasColumnType("int");

                    b.Property<int>("PatientPreferences_ID")
                        .HasColumnType("int");

                    b.HasKey("Language_ID", "PatientPreferences_ID");

                    b.HasIndex("PatientPreferences_ID");

                    b.ToTable("PreferedSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.Patient", b =>
                {
                    b.HasOne("MediLink.Entities.PatientDetails", "PatientDetails")
                        .WithMany()
                        .HasForeignKey("PatientDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("MediLink.Entities.PatientDetails", b =>
                {
                    b.HasOne("MediLink.Entities.PatientAddress", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PatientPreferences", "PatientPreferences")
                        .WithMany()
                        .HasForeignKey("PatientPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientAddress");

                    b.Navigation("PatientPreferences");
                });

            modelBuilder.Entity("MediLink.Entities.PatientPreferences", b =>
                {
                    b.HasOne("MediLink.Entities.OfficeType", "OfficeType")
                        .WithMany()
                        .HasForeignKey("OfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeType");
                });

            modelBuilder.Entity("MediLink.Entities.PatientSpokenLanguages", b =>
                {
                    b.HasOne("MediLink.Entities.Languages", "Language")
                        .WithMany("PatientSpokenLanguages")
                        .HasForeignKey("Laguage_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PatientDetails", "PatientDetails")
                        .WithMany("PatientSpokenLanguages")
                        .HasForeignKey("PatientDetails_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PatientDetails");
                });

            modelBuilder.Entity("MediLink.Entities.PractionerDetails", b =>
                {
                    b.HasOne("MediLink.Entities.OfficeType", "OfficeType")
                        .WithMany()
                        .HasForeignKey("OfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PractionerAddress", "PractionerAddress")
                        .WithMany()
                        .HasForeignKey("PractionerAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfficeType");

                    b.Navigation("PractionerAddress");
                });

            modelBuilder.Entity("MediLink.Entities.Practitioner", b =>
                {
                    b.HasOne("MediLink.Entities.PractionerDetails", "PractionerDetails")
                        .WithMany()
                        .HasForeignKey("PractionerDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PractitionerType", "PractitionerType")
                        .WithMany()
                        .HasForeignKey("PractitionerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PractionerDetails");

                    b.Navigation("PractitionerType");
                });

            modelBuilder.Entity("MediLink.Entities.PractitionerSpokenLanguages", b =>
                {
                    b.HasOne("MediLink.Entities.Languages", "Language")
                        .WithMany("PractitionerSpokenLanguages")
                        .HasForeignKey("Laguage_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PractionerDetails", "PractionerDetails")
                        .WithMany("PractitionerSpokenLanguages")
                        .HasForeignKey("PractionerDetails_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PractionerDetails");
                });

            modelBuilder.Entity("MediLink.Entities.PreferedSpokenLanguages", b =>
                {
                    b.HasOne("MediLink.Entities.Languages", "Language")
                        .WithMany("PreferedSpokenLanguages")
                        .HasForeignKey("Language_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediLink.Entities.PatientPreferences", "PatientPreferences")
                        .WithMany("PreferedSpokenLanguages")
                        .HasForeignKey("PatientPreferences_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("PatientPreferences");
                });

            modelBuilder.Entity("MediLink.Entities.Languages", b =>
                {
                    b.Navigation("PatientSpokenLanguages");

                    b.Navigation("PractitionerSpokenLanguages");

                    b.Navigation("PreferedSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.PatientDetails", b =>
                {
                    b.Navigation("PatientSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.PatientPreferences", b =>
                {
                    b.Navigation("PreferedSpokenLanguages");
                });

            modelBuilder.Entity("MediLink.Entities.PractionerDetails", b =>
                {
                    b.Navigation("PractitionerSpokenLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
